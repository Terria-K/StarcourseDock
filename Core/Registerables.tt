<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Teuria.StarcourseDock" #>
using Nickel;
using Nanoray.PluginManager;

namespace Teuria.StarcourseDock;
<#
    List<string> registerables = new List<string>();
    foreach (var type in typeof(ModEntry).Assembly.GetTypes())
    {
        if (type.GetInterfaces().Where(x => x == typeof(IRegisterable)).Any())
        {
            registerables.Add(type.FullName);
        }
    }
#>

internal static class Registerables
{
    public static void Register(IPluginPackage<IModManifest> package, IModHelper helper)
    {
<# foreach (var registerable in registerables) { #>
        <#=registerable#>.Register(package, helper);
<# } #>
    }
}